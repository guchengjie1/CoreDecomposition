package K;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Random;
import java.util.Set;
import java.io.*;

public class Search_k {
	public static void main(String[]args) {
		int k=5;//度数少于k的结点 不断 删除，最终得到结点 大于等于k的子图
		Map<Integer,Set<Integer>> map=new HashMap<>();//创建network
		Map<Integer,Integer> degree=new HashMap<>();//创建每一个结点的度数map
		
		//读取文件，初始化map和degree
		try {
			BufferedReader br=new BufferedReader(new FileReader("./src/files/facebook.txt"));
			String str=null;
			while((str=br.readLine())!=null) {
				String[] s=str.split(" ");
				int cur=Integer.parseInt(s[0]);
				int neighbor=Integer.parseInt(s[1]);
				if(map.containsKey(cur)) {
					map.get(cur).add(neighbor);
					degree.put(cur,degree.get(cur)+1);
				}else {
					Set<Integer> set=new HashSet<>();
					set.add(neighbor);
					degree.put(cur,1);
					map.put(cur,set);
				}
				if(map.containsKey(neighbor)) {
					map.get(neighbor).add(cur);
					degree.put(neighbor,degree.get(neighbor)+1);
				}else {
					Set<Integer> set=new HashSet<>();
					set.add(cur);
					degree.put(neighbor,1);
					map.put(neighbor,set);
				}
			}
			br.close();
		} catch (NumberFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//对degree按照value进行升序排序
		List<Map.Entry<Integer, Integer>> list=new ArrayList<Map.Entry<Integer,Integer>>(degree.entrySet());
		list.sort(new Comparator<Map.Entry<Integer,Integer>>(){
			public int compare(Map.Entry<Integer, Integer> a1,Map.Entry<Integer, Integer> a2) {
				return a1.getValue().compareTo(a2.getValue());
			}
		});
		
		//k-core删除结点
		Queue<Integer> queue=new LinkedList<>();
		for(Integer a:degree.keySet()) {
			if(degree.get(a)<k) {
				queue.offer(a);
			}
		}
		while(!queue.isEmpty()) {
			int cur=queue.poll();//移除当前的小于k的结点
			//遍历其邻接结点
			for(Integer a:map.get(cur)) {
				degree.put(a,degree.get(a)-1);//将其所有邻接结点度数-1
				map.get(a).remove(cur);
				if(degree.get(a)<k) {
					queue.offer(a);
				}
			}
			//处理完成这个结点的所有邻接结点，删除这个结点
			map.remove(cur);
		}
		
		try {
			int count=1;
			String filename="./src/results/"+"query_"+k+"_round_"+count;
			BufferedWriter bw=new BufferedWriter(new FileWriter(filename));
			while(!map.isEmpty()) {
				Integer randomKey=getKey(map);
				Queue<Integer> queue_1=new LinkedList<>();
				queue_1.offer(randomKey);
				Map<Integer,Integer> visited=new HashMap<>();
				visited.put(randomKey,1);
				bw.write(randomKey+" ");
				
				while(!queue_1.isEmpty()) {
					int cur=queue_1.poll();
					//得到一个map里面的元素,通过它的邻接元素得到一个连通分图
					
					for(Integer next:map.get(cur)) {
						if(map.containsKey(next)&&!visited.containsKey(next)) {
							//如果这个邻居点没有被删除，并且没有被访问，那么它符合连通，是存在同一个连通分图里面的
							//对于这样的点，放入queue，visited加入，写进文件（封装起来）
							queue_1.offer(next);
							visited.put(next,1);
							//写入文件
							bw.write(next+" ");
						}
					}
					map.remove(cur);
				}
				//遍历完一个连通分图，重新打开一个流，输出到其他文件里面
				count++;
				filename="./src/results/"+"query_"+k+"_round_"+count;
				bw=new BufferedWriter(new FileWriter(filename));
			}
			bw.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	static Integer getKey(Map<Integer,Set<Integer>> map) {
		Integer[] keys=map.keySet().toArray(new Integer[0]);
		Random rand=new Random();
		Integer randomKey=keys[rand.nextInt(keys.length)];
		return randomKey;
	}
}
